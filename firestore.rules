rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    match /users/{userId} {
      allow read, update: if getUserData().tenantId == 'support-uxfrz';
    }

    match /vendors/{vendorId} {
      allow read, update: if getUserData().tenantId == 'support-uxfrz';
    }

    match /supportAudits/{supportAuditId} {
      allow create: if getUserData().tenantId == 'support-uxfrz';
    }

    match /supportTickets/{ticketId} {
      allow read, update: if getUserData().tenantId == 'support-uxfrz';
      allow create: if request.auth != null
                    && getUserData().lastActionAt < (request.time - duration.value(1,'s'));
      allow delete: if getUserData().tenantId == 'support-uxfrz';
    }

    match /users/{userId} {
    	allow get:	if isAuthenticated()
      						&& request.auth.uid == userId;

      allow update:	if isAuthenticated()
      							&& isValidUpdate();

      function isValidUpdate() {
      	let affectedKeys = getRequestData().diff(resource.data).affectedKeys();
        return affectedKeys.hasOnly(['email', 'phoneNumber', 'displayName', 'photoURL', 'isOnboarded', 'updatedAt'])
        		&& getRequestData().email is string
            && getRequestData().phoneNumber is string
            && getRequestData().displayName is string
            && getRequestData().photoURL is string
            && getRequestData().isOnboarded is bool
            && getRequestData().email.size() > 0
            && getRequestData().phoneNumber.size() == 13
            && (getRequestData().displayName.size() >= 3
            && getRequestData().displayName.size() <= 30)
            && ((getRequestData().isOnboarded == true && getResourceData().isOnboarded == false)
            || (getRequestData().isOnboarded == true && getResourceData().isOnboarded == true))
            && getRequestData().updatedAt.toMillis() == request.time.toMillis();
      }
    }

    match /vendors/{vendorId} {
    	allow create: if true;

      allow read: if isAuthenticated()
      						&& getUserData().vendorId == getResourceData().vendorId;

      allow update: if getUserData().tenantId == 'support-uxfrz'
                    || (getResourceData().vendorId == getUserData().vendorId
      							&& get(
                    	/databases/$(database)/documents/vendors/$(vendorId)
                    ).data.branchCreatedAt < (request.time - duration.value(1,'s')));
    }


    // Rules for disputeHandling
    match /disputes/{dispute} {
  allow create: if request.auth.uid != null && request.auth.uid == get(/databases/$(database)/documents/receipts/$(request.resource.data.receiptId)).data.userUid;
}


    // Rules for settingPage
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for Profile Page
    match /users/{userId} {
      // Allow read if the user's UID matches the document ID
      allow read: if request.auth != null && request.auth.uid == userId;
    }

    // Receipts profile View
    match /receipts/{receiptId} {
      // Allow read if the user's UID matches the userUid field in the document
      allow read: if request.auth != null && request.auth.uid == resource.data.userUid;
    }


    match /receipts/{receiptId} {
  		allow read: if request.auth != null;

      allow update: if request.auth != null;
  	}

    match /usersReceiptsVendors/{userId} {
  		allow read: if request.auth != null;
  	}

    function isAuthenticated() {
      return request.auth != null
          && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function getUserData() {
    return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function getRequestData() {
    	return request.resource.data;
    }

    function getResourceData() {
    	return resource.data;
    }
  }
}